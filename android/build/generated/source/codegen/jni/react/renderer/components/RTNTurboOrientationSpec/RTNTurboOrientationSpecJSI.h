/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  class JSI_EXPORT NativeTurboOrientationCxxSpecJSI : public TurboModule {
protected:
  NativeTurboOrientationCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual void lock(jsi::Runtime &rt, jsi::String orientation) = 0;
  virtual void toggleHomeIndicatorOrSinkStatusBar(jsi::Runtime &rt, bool on) = 0;
  virtual void toggleNativeObserver(jsi::Runtime &rt, bool on) = 0;

};

template <typename T>
class JSI_EXPORT NativeTurboOrientationCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativeTurboOrientationCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("RTNTurboOrientation", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeTurboOrientationCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTurboOrientationCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    void lock(jsi::Runtime &rt, jsi::String orientation) override {
      static_assert(
          bridging::getParameterCount(&T::lock) == 2,
          "Expected lock(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::lock, jsInvoker_, instance_, std::move(orientation));
    }
    void toggleHomeIndicatorOrSinkStatusBar(jsi::Runtime &rt, bool on) override {
      static_assert(
          bridging::getParameterCount(&T::toggleHomeIndicatorOrSinkStatusBar) == 2,
          "Expected toggleHomeIndicatorOrSinkStatusBar(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::toggleHomeIndicatorOrSinkStatusBar, jsInvoker_, instance_, std::move(on));
    }
    void toggleNativeObserver(jsi::Runtime &rt, bool on) override {
      static_assert(
          bridging::getParameterCount(&T::toggleNativeObserver) == 2,
          "Expected toggleNativeObserver(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::toggleNativeObserver, jsInvoker_, instance_, std::move(on));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
